{"version":3,"sources":["constants/api.ts","constants/index.ts","components/spinner/styles.ts","components/spinner/index.tsx","components/error/styles.ts","components/error/index.tsx","components/photo/styles.ts","components/photo/index.tsx","queries/fetchImages.ts","containers/images/withQuery/styles.ts","containers/images/withQuery/index.tsx","containers/images/styles.ts","containers/images/index.tsx"],"names":["api","url","__webpack_require__","d","__webpack_exports__","StyledReactLoading","styled","ReactLoading","_templateObject","Object","taggedTemplateLiteral","Spinner","_ref","delay","className","_ref$type","type","color","_ref$height","height","_ref$width","width","theme","useTheme","react_default","a","createElement","colors","blueDianne","Container","div","Image","Icon","_templateObject2","Text","p","_templateObject3","Error","children","icon","StyledPhoto","img","media","mobile","Photo","src","alt","fetchImages","asyncToGenerator","_regeneratorRuntime","mark","_callee","breedId","response","wrap","_context","prev","next","fetch","concat","method","headers","x-api-key","process","sent","abrupt","json","stop","_x","apply","this","arguments","Wrapper","styles_templateObject","withQuery","Component","props","formatMessage","useFormatMessage","useParams","_useQuery","useQuery","data","isLoading","error","spinner","components_error","iconName","String","message","assign","images_styles_templateObject","Title","h1","PhotosWrapper","_ref2","useStateValue","state","slicedToArray","currentCat","id","map","image","photo","key"],"mappings":"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","file":"static/js/6.6d7d2b21.chunk.js","sourcesContent":["const api: Record<string, string> = {\n  url: 'https://api.thecatapi.com/v1',\n};\n\nexport { api };\n","export { api } from './api';\n","import styled from 'styled-components';\nimport ReactLoading from 'react-loading';\n\nexport const StyledReactLoading = styled(ReactLoading)``;\n","import React from 'react';\nimport { LoadingType } from 'react-loading';\nimport { useTheme } from 'styled-components';\n\nimport { ThemeType } from '../../theme';\n\nimport { StyledReactLoading } from './styles';\n\ntype SpinnerType = {\n  type?: LoadingType;\n  color?: string;\n  height?: string;\n  width?: string;\n  delay?: number;\n  className?: string;\n};\n\nconst Spinner = ({\n  delay,\n  className,\n  type = 'spin',\n  color,\n  height = 'auto',\n  width = '20rem',\n}: SpinnerType) => {\n  const theme = useTheme() as ThemeType;\n\n  return (\n    <StyledReactLoading\n      className={className}\n      type={type}\n      color={color || theme.colors.blueDianne}\n      height={height}\n      width={width}\n      delay={delay}\n    />\n  );\n};\n\nexport default Spinner;\n","import styled from 'styled-components';\n\nimport Icon from '../icon';\n\nexport const Container = styled.div`\n  display: flex;\n  align-items: center;\n  max-height: 10rem;\n  max-width: 50%;\n`;\n\nexport const Image = styled(Icon)`\n  display: flex;\n  align-self: flex-start;\n  max-height: 10rem;\n  max-width: auto;\n`;\n\nexport const Text = styled.p`\n  margin-left: 1rem;\n  font-size: 2.5rem;\n  line-height: 3rem;\n`;\n","import React from 'react';\n\nimport { Container, Text, Image } from './styles';\n\ntype ErrorType = {\n  className?: string;\n  icon: { iconName: string; alt: string };\n  children: React.ReactNode;\n};\n\nconst Error = ({ className, children, icon }: ErrorType) => (\n  <Container className={className}>\n    <Image {...icon} />\n    <Text>{children}</Text>\n  </Container>\n);\n\nexport default Error;\n","import styled from 'styled-components';\n\nexport const StyledPhoto = styled.img`\n  max-width: 40rem;\n  max-height: 30rem;\n  width: 50%:\n  height: auto;\n  border-radius: 1rem;\n  \n   ${({ theme }) => theme.media.mobile} {\n    max-width: 100%;\n  }\n`;\n","import React from 'react';\n\nimport { StyledPhoto } from './styles';\n\ntype PhotoType = { src: string; alt: string; className?: string };\n\nconst Photo = ({ src, alt, className }: PhotoType) => (\n  <StyledPhoto className={className} src={src} alt={alt} />\n);\n\nexport default Photo;\n","import { api } from '../constants';\n\nconst fetchImages = async (breedId: string) => {\n  const response = await fetch(`${api.url}/images/search?breed_ids=${breedId}&limit=20`, {\n    method: 'GET',\n    headers: {\n      'x-api-key': process.env.REACT_APP_API_KEY || '',\n    },\n  });\n  return response.json();\n};\n\nexport default fetchImages;\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  height: 100%;\n  width: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n","import React from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useQuery, UseQueryResult } from 'react-query';\n\nimport Error from '../../../components/error';\nimport Spinner from '../../../components/spinner';\nimport fetchImages from '../../../queries/fetchImages';\nimport { useFormatMessage } from '../../../hooks/useFormatMessage';\n\nimport { Wrapper } from './styles';\n\nconst withQuery = <T extends object>(Component: React.FC<T>): React.FC<T> => {\n  return (props: T) => {\n    const formatMessage = useFormatMessage();\n    const { breedId } = useParams() as { breedId: string };\n\n    const { data, isLoading, error }: UseQueryResult & { error: any } = useQuery(\n      ['images', { breedId }],\n      () => fetchImages(breedId),\n    );\n\n    if (isLoading)\n      return (\n        <Wrapper>\n          <Spinner />\n        </Wrapper>\n      );\n\n    if (error)\n      return (\n        <Error icon={{ iconName: 'error', alt: formatMessage('common.errorIconAlt') }}>\n          <span>{String(error.message)}</span>\n        </Error>\n      );\n\n    return <Component {...props} data={data} />;\n  };\n};\n\nexport default withQuery;\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const Title = styled.h1`\n  font-size: 4rem;\n  margin-bottom: 2rem;\n  line-height: 3rem;\n`;\n\nexport const PhotosWrapper = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 2rem;\n`;\n","import React from 'react';\nimport { FormattedMessage } from 'react-intl';\n\nimport Photo from '../../components/photo';\nimport { Image } from '../../types';\nimport { StoreContextType, useStateValue } from '../../store';\nimport { useFormatMessage } from '../../hooks/useFormatMessage';\n\nimport withQuery from './withQuery';\nimport { Container, Title, PhotosWrapper } from './styles';\n\nexport type ImagesType = {\n  data: Image[];\n};\n\nconst Images = ({ data }: ImagesType) => {\n  const formatMessage = useFormatMessage();\n  const [state] = useStateValue() as StoreContextType;\n  return (\n    <Container>\n      <Title>{state.currentCat || <FormattedMessage id=\"images.defaultHeader\" />}</Title>\n      <PhotosWrapper>\n        {data.map((image: Image) => (\n          <Photo key={image.id} src={image.url} alt={formatMessage('images.catAlt')} />\n        ))}\n      </PhotosWrapper>\n    </Container>\n  );\n};\n\nexport default withQuery(Images);\n"],"sourceRoot":""}